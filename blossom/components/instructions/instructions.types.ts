/**
 * Autogenerated with Blossom Toolbelt v0.0.0.
 *
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 */

import { Maybe, MutationResolverSignature, ObjectResolverSignature } from '@blossom-gql/core';

import { RequestContext } from 'blossom/instance';
import { Recipe } from 'blossom/components/recipes/recipes.types';

/**
 * Represents an instruction entity.
 */
export type Instruction = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'Instruction';
  /**
   * Unique identifier of this instruction.
   */
  id: string;
  /**
   * Identifier of the recipe this instruction is associated to.
   */
  recipeId: string;
  /**
   * Contents of the instruction.
   */
  instructionContent: string;
  /**
   * Seconds since the UNIX epoch when this entity was inserted in the data store.
   */
  createdAt: number;
  /**
   * Seconds since the UNIX epoch when this entity was most recently updated in
   * the data store.
   */
  updatedAt: number;
  /**
   * Associated recipe **entity** (object).
   */
  recipe: ObjectResolverSignature<{}, Promise<Recipe>, RequestContext>;
};

/**
 * Payload for creating an instruction.
 */
export type CreateInstructionPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'CreateInstructionPayload';
  /**
   * Identifier of the recipe this instruction will be associated to.
   */
  recipeId: string;
  /**
   * Contents of the instruction. Not optional.
   */
  instructionContent: string;
};

/**
 * Payload for updating an instruction.
 */
export type UpdateInstructionPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'UpdateInstructionPayload';
  /**
   * Contents of the instruction. Not optional.
   */
  instructionContent?: Maybe<string>;
};

/**
 * Creates an instruction and returns the newly created entity.
 */
export type CreateInstructionMutation = MutationResolverSignature<
  {
    /**
     * Payload for creating the instruction.
     */
    payload: CreateInstructionPayload;
  },
  Promise<Instruction>,
  RequestContext
>;

/**
 * Updates an existing instruction and returns the newly update entity.
 */
export type UpdateInstructionMutation = MutationResolverSignature<
  {
    /**
     * ID of the existing instruction. Will return an error if not found.
     */
    id: string;
    /**
     * Payload for updating the instruction.
     */
    payload: UpdateInstructionPayload;
  },
  Promise<Instruction>,
  RequestContext
>;

/**
 * Deletes an instruction based on ID. Returns the ID of the deleted instruction.
 */
export type DeleteInstructionMutation = MutationResolverSignature<
  {
    /**
     * ID of the existing instruction. Will return an error if not found.
     */
    id: string;
  },
  Promise<string>,
  RequestContext
>;
