/**
 * Autogenerated with Blossom Toolbelt v0.0.0.
 *
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 */

import {
  Maybe,
  QueryResolverSignature,
  MutationResolverSignature,
  ObjectResolverSignature,
} from '@blossom-gql/core';

import { RequestContext } from 'blossom/instance';
import { RecipeIngredient } from 'blossom/components/recipe-ingredients/recipe-ingredients.types';
import { Instruction } from 'blossom/components/instructions/instructions.types';

/**
 * Represents a recipe entity.
 */
export type Recipe = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'Recipe';
  /**
   * Unique identifier associated to the recipe.
   */
  id: string;
  /**
   * Title of the recipe.
   */
  title: string;
  /**
   * Optionally, a description of the recipe.
   */
  description?: Maybe<string>;
  /**
   * Seconds since the UNIX epoch when this entity was inserted in the data store.
   */
  createdAt: number;
  /**
   * Seconds since the UNIX epoch when this entity was most recently updated in
   * the data store.
   */
  updatedAt: number;
  /**
   * List of associated recipe ingredient **entities** (objects). This list can be
   * empty if no recipe ingredients have been defined for this recipe yet.
   */
  recipeIngredients: ObjectResolverSignature<
    {},
    Promise<ReadonlyArray<RecipeIngredient>>,
    RequestContext
  >;
  /**
   * List of associated instruction **entities** (objects). This list can be empty
   * if no instructions have been defined for this recipe yet.
   */
  instructions: ObjectResolverSignature<{}, Promise<ReadonlyArray<Instruction>>, RequestContext>;
};

/**
 * Payload for creating a recipe.
 */
export type CreateRecipePayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'CreateRecipePayload';
  /**
   * Title of the recipe.
   */
  title: string;
  /**
   * Optionally, a description of the recipe.
   */
  description?: Maybe<string>;
};

/**
 * Payload for updating a recipe.
 */
export type UpdateRecipePayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'UpdateRecipePayload';
  /**
   * Title of the recipe.
   */
  title?: Maybe<string>;
  /**
   * Optionally, a description of the recipe.
   */
  description?: Maybe<string>;
};

/**
 * Retrieves a recipe by ID. If the recipe does not exist, this will return null.
 */
export type RecipeQuery = QueryResolverSignature<
  {
    /**
     * Unique identifier of the recipe that needs to be retrieved.
     */
    id: string;
  },
  Promise<Maybe<Recipe>>,
  RequestContext
>;

/**
 * Creates a recipe based on a payload. Returns the newly created recipe entity.
 */
export type CreateRecipeMutation = MutationResolverSignature<
  {
    /**
     * Payload for creating the recipe.
     */
    payload: CreateRecipePayload;
  },
  Promise<Recipe>,
  RequestContext
>;

/**
 * Updates an existing recipe based on its identifier and a  a payload. Returns
 * the update recipe entity.
 */
export type UpdateRecipeMutation = MutationResolverSignature<
  {
    /**
     * Identifier of the recipe. If not found, an error will be returned.
     */
    id: string;
    /**
     * Payload for updating the recipe.
     */
    payload: UpdateRecipePayload;
  },
  Promise<Recipe>,
  RequestContext
>;

/**
 * Deletes a recipe based on ID. Returns the ID of the deleted recipe.
 */
export type DeleteRecipeMutation = MutationResolverSignature<
  {
    /**
     * Identifier of the recipe. If not found, an error will be returned.
     */
    id: string;
  },
  Promise<string>,
  RequestContext
>;
