/**
 * Autogenerated with Blossom Toolbelt v0.0.0.
 *
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 */

import { Maybe, MutationResolverSignature, ObjectResolverSignature } from '@blossom-gql/core';

import { RequestContext } from 'blossom/instance';
import { Ingredient } from 'blossom/components/ingredients/ingredients.types';

/**
 * A list with all the possible units for a recipe ingredient.
 */
export enum Unit {
  /**
   * Kilograms
   */
  Kg = 'KG',
  /**
   * Grams
   */
  G = 'G',
  /**
   * Ounces (weight)
   */
  Oz = 'OZ',
  /**
   * Pounds
   */
  Lb = 'LB',
  /**
   * Fluid Ounces
   */
  FlOz = 'FL_OZ',
  /**
   * Milliliters
   */
  Ml = 'ML',
  /**
   * Liters
   */
  L = 'L',
  /**
   * Units (for specifying units)
   */
  U = 'U',
  /**
   * Cups
   */
  Cup = 'CUP',
  /**
   * Tablespoons
   */
  Tbsp = 'TBSP',
  /**
   * Teaspoons
   */
  Tsp = 'TSP',
  /**
   * To taste
   */
  ToTaste = 'TO_TASTE',
}

/**
 * A resource for representing a `recipe_ingredient` entity.
 */
export type RecipeIngredient = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'RecipeIngredient';
  /**
   * Unique identifier of the resource.
   */
  id: string;
  /**
   * **Identifier** of the associated recipe for this recipe ingredient.
   */
  recipeId: string;
  /**
   * **Identifier** of the associated ingredient for this recipe ingredient.
   */
  ingredientId: string;
  /**
   * Special instructions for giving special indications about the ingredient in the
   * context of this recipe.
   */
  specialInstructions?: Maybe<string>;
  /**
   * Float number that specifies the quantity of the ingredient on this recipe. If it's
   * marked as *to_taste* (`unit = TO_TASTE`), this will be `0`.
   */
  quantity: number;
  /**
   * Unit for this recipe ingredient.
   */
  unit: Unit;
  /**
   * Seconds since the UNIX epoch when this entity was inserted in the data store.
   */
  createdAt: number;
  /**
   * Seconds since the UNIX epoch when this entity was most recently updated in
   * the data store.
   */
  updatedAt: number;
  /**
   * Associated ingredient **entity** for this recipe ingredient.
   */
  ingredient: ObjectResolverSignature<{}, Promise<Ingredient>, RequestContext>;
};

/**
 * Payload for creating a new recipe ingredient.
 */
export type CreateRecipeIngredientPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'CreateRecipeIngredientPayload';
  /**
   * Identifier of the recipe this recipe ingredient is associated to.
   */
  recipeId: string;
  /**
   * Identifier of the ingredient this recipe ingredient is associated to.
   */
  ingredientId: string;
  /**
   * Special instructions for giving special indications about the ingredient in the
   * context of this recipe.
   */
  specialInstructions?: Maybe<string>;
  /**
   * Float number that specifies the quantity of the ingredient on this recipe. If it's
   * marked as *to_taste* (`unit = TO_TASTE`), this will be `0`.
   */
  quantity: number;
  /**
   * Unit for this recipe ingredient.
   */
  unit: Unit;
};

/**
 * Payload for updating an existing recipe ingredient. Notice that associated entities
 * are no longer editable, thus they are not listed as fields.
 */
export type UpdateRecipeIngredientPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'UpdateRecipeIngredientPayload';
  /**
   * Special instructions for giving special indications about the ingredient in the
   * context of this recipe.
   */
  specialInstructions?: Maybe<string>;
  /**
   * Float number that specifies the quantity of the ingredient on this recipe. If it's
   * marked as *to_taste* (`unit = TO_TASTE`), this will be `0`.
   */
  quantity?: Maybe<number>;
  /**
   * Unit for this recipe ingredient.
   */
  unit?: Maybe<Unit>;
};

/**
 * Creates a new recipe ingredient on an existing recipe and making use of an existing
 * ingredient. Returns the newly created recipe ingredient.
 */
export type CreateRecipeIngredientMutation = MutationResolverSignature<
  {
    /**
     * Object with the payload for the recipe ingredient to be created.
     */
    payload: CreateRecipeIngredientPayload;
  },
  Promise<RecipeIngredient>,
  RequestContext
>;

/**
 * Updates an existing recipe ingredient and returns the updated recipe ingredient.
 */
export type UpdateRecipeIngredientMutation = MutationResolverSignature<
  {
    /**
     * Identifier of the recipe ingredient. If not found, an error will be raised.
     */
    id: string;
    /**
     * Object with the associated payload for updating the ingredient.
     */
    payload: UpdateRecipeIngredientPayload;
  },
  Promise<RecipeIngredient>,
  RequestContext
>;

/**
 * Deletes an existing recipe ingredient based on the ID. Returns the ID of the
 * deleted recipe ingredient.
 */
export type DeleteRecipeIngredientMutation = MutationResolverSignature<
  {
    /**
     * Identifier of the recipe ingredient. If not found, this will raise an error.
     */
    id: string;
  },
  Promise<string>,
  RequestContext
>;
