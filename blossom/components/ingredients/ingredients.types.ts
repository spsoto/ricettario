/**
 * Autogenerated with Blossom Toolbelt v0.0.0.
 *
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 */

import {
  Maybe,
  QueryResolverSignature,
  MutationResolverSignature,
  ObjectResolverSignature,
} from '@blossom-gql/core';

import { RequestContext } from 'blossom/instance';

/**
 * Represents an ingredient entity.
 */
export type Ingredient = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'Ingredient';
  /**
   * Unique identifier of the ingredient.
   */
  id: string;
  /**
   * Name of the ingredient. Must always be present.
   */
  name: string;
  /**
   * Millis since the UNIX epoch when this entity was inserted in the data store.
   */
  createdAt: number;
  /**
   * Millis since the UNIX epoch when this entity was most recently updated in
   * the data store.
   */
  updatedAt: number;
};

/**
 * Payload for creating an ingredient.
 */
export type CreateIngredientPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'CreateIngredientPayload';
  /**
   * Name of the ingredient. Non-optional for creation.
   */
  name: string;
};

/**
 * Payload for updating an ingredient.
 */
export type UpdateIngredientPayload = {
  /**
   * Required by GraphQL.js. Must match the name of the object in the GraphQL SDL
   * this type is representing in the codebase.
   */
  __typename: 'UpdateIngredientPayload';
  /**
   * Name of the ingredient. Optional on update. However, trying to null it will
   * return an error.
   */
  name?: Maybe<string>;
};

/**
 * Retrieves an ingredient by ID. Will return `null` if the ingredient is not
 * found.
 */
export type IngredientQuery = QueryResolverSignature<
  {
    /**
     * ID of the ingredient.
     */
    id: string;
  },
  Promise<Maybe<Ingredient>>,
  RequestContext
>;

/**
 * Creates an ingredient based on a payload. Returns the newly created ingredient.
 */
export type CreateIngredientMutation = MutationResolverSignature<
  {
    /**
     * Payload for creating the ingredient.
     */
    payload: CreateIngredientPayload;
  },
  Promise<Ingredient>,
  RequestContext
>;

/**
 * Updates a single existing ingredient by looking up by ID and giving an payload.
 * Returns the updated ingredient.
 */
export type UpdateIngredientMutation = MutationResolverSignature<
  {
    /**
     * ID of the existing ingredient. Will return an error if the ingredient is not
     * found.
     */
    id: string;
    /**
     * Payload for updating the ingredient.
     */
    payload: UpdateIngredientPayload;
  },
  Promise<Ingredient>,
  RequestContext
>;
